SalePrice1 = dataTrain$SalePrice
# creating a character only column
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
# turn character values in numeric
dataTrainCharNum = dataTrainChar
for (col_name in names(dataTrainChar)) {
factor_vector <- factor(dataTrainChar[[col_name]])
dataTrainCharNum[[col_name]] <- as.numeric(factor_vector)
}
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
dataTrainCharClean = dataTrainCharNum
dataTrainCharNum2 = dataTrainCharNum
cleaned = list()
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(dataTrainCharNum, SalePrice,
dataTrainCharNum[[col_name]])
dataTrainCharClean[[col_name]] = cleaned
}
remove_outliers <- function(df, variable, factor_variable, threshold = 2) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
SalePrice1 = dataTrain$SalePrice
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
# turn character values in numeric
dataTrainCharNum = dataTrainChar
for (col_name in names(dataTrainChar)) {
factor_vector <- factor(dataTrainChar[[col_name]])
dataTrainCharNum[[col_name]] <- as.numeric(factor_vector)
}
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
cleaned = list()
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(dataTrainCharNum, SalePrice,
dataTrainCharNum[[col_name]])
dataTrainCharClean[[col_name]] = cleaned
}
dataTrainCharClean = data.frame()
cleaned = list()
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(dataTrainCharNum, SalePrice,
dataTrainCharNum[[col_name]])
dataTrainCharClean[[col_name]] = cleaned
}
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$Street)
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
cleaned = remove_outliers(cleaned, SalePrice, dataTrainCharNum$Street)
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Street)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$LotShape)
remove_outliers <- function(df, variable, factor_variable, threshold = 2) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
# creating a character only column
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
# turn character values in numeric
dataTrainCharNum = dataTrainChar
for (col_name in names(dataTrainChar)) {
factor_vector <- factor(dataTrainChar[[col_name]])
dataTrainCharNum[[col_name]] <- as.numeric(factor_vector)
}
# removing outliers
# adds the saleprice column to the dataframe
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
cleaned = list()
SalePrice1 = dataTrain$SalePrice
# removing outliers
# adds the saleprice column to the dataframe
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
cleaned = list()
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
dataTrainCharNum = dataTrainCharNum[, -c("MSZoning")]
dataTrainCharNum <- dataTrainCharNum[, -which(names(dataTrainCharNum) == "MSZoning")]
View(dataTrainCharNum)
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(cleaned, SalePrice, cleaned[[col_name]])
}
remove_outliers <- function(df, variable, factor_variable, threshold = 3) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
dataTrainCharNum <- dataTrainCharNum[, -which(names(dataTrainCharNum) == "MSZoning")]
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
SalePrice1 = dataTrain$SalePrice
# creating a character only column
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
# turn character values in numeric
dataTrainCharNum = dataTrainChar
for (col_name in names(dataTrainChar)) {
factor_vector <- factor(dataTrainChar[[col_name]])
dataTrainCharNum[[col_name]] <- as.numeric(factor_vector)
}
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
dataTrainCharClean = data.frame()
cleaned = list()
dataTrainCharNum <- dataTrainCharNum[, -which(names(dataTrainCharNum) == "MSZoning")]
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(cleaned, SalePrice, cleaned[[col_name]])
}
remove_outliers <- function(df, variable, factor_variable, threshold = 2) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(cleaned, SalePrice, cleaned[[col_name]])
}
remove_outliers <- function(df, variable, factor_variable, threshold = 2) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
SalePrice1 = dataTrain$SalePrice
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
# turn character values in numeric
dataTrainCharNum = dataTrainChar
for (col_name in names(dataTrainChar)) {
factor_vector <- factor(dataTrainChar[[col_name]])
dataTrainCharNum[[col_name]] <- as.numeric(factor_vector)
}
# removing outliers
# adds the saleprice column to the dataframe
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Street)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$LotShape)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$LandContour)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Utilities)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$LotConfig)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$LandSlope)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Neighborhood)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Condition1)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Condition2)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$BldgType)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$HouseStyle)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$RoofMatl)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Exterior1st)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Exterior2nd)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$MasVnrType)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$ExterQual)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$ExterCond)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$Foundation)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$BsmtQual)
cleaned = remove_outliers(cleaned, SalePrice, cleaned$BsmtCond)
remove_outliers <- function(df, variable, factor_variable, threshold = 4) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
SalePrice1 = dataTrain$SalePrice
# creating a character only column
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
# turn character values in numeric
dataTrainCharNum = dataTrainChar
for (col_name in names(dataTrainChar)) {
factor_vector <- factor(dataTrainChar[[col_name]])
dataTrainCharNum[[col_name]] <- as.numeric(factor_vector)
}
# removing outliers
# adds the saleprice column to the dataframe
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
()
cleaned = list()
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
dataTrainCharNum <- dataTrainCharNum[, -which(names(dataTrainCharNum) == "MSZoning")]
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(cleaned, SalePrice, cleaned[[col_name]])
}
remove_outliers <- function(df, variable, factor_variable, threshold = 5) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
remove_outliers <- function(df, variable, factor_variable, threshold = 5) {
df %>%
group_by({{ factor_variable }}) %>%
mutate(z_score = scale({{ variable }})) %>%
filter(abs(z_score) <= threshold) %>%
ungroup() %>%
select(-z_score)
}
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
SalePrice1 = dataTrain$SalePrice
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
# turn character values in numeric
dataTrainCharNum = dataTrainChar
for (col_name in names(dataTrainChar)) {
factor_vector <- factor(dataTrainChar[[col_name]])
dataTrainCharNum[[col_name]] <- as.numeric(factor_vector)
}
dataTrainCharNum = data.frame(dataTrainCharNum, SalePrice = SalePrice1)
dataTrainCharClean = data.frame()
cleaned = list()
cleaned = remove_outliers(dataTrainCharNum, SalePrice, dataTrainCharNum$MSZoning)
dataTrainCharNum <- dataTrainCharNum[, -which(names(dataTrainCharNum) == "MSZoning")]
for (col_name in names(dataTrainCharNum)) {
cleaned = remove_outliers(cleaned, SalePrice, cleaned[[col_name]])
}
# loading data
dataTrain = read.csv("train.csv")
dataTrain$Id = NULL
dataTest$Id = NULL
dataTest = read.csv("test.csv")
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
character_columns = sapply(dataTrain, is.character)
dataTestChar = dataTest[, character_columns]
for (col_name in names(dataTrainChar)) {
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestChar[[col_name]] <- ifelse(!is.na(match(dataTestChar[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestChar[[col_name]])
dataTestChar[[col_name]] = as.numeric(dataTestChar[[col_name]])
}
for (col_name in names(dataTrainChar)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainChar[[col_name]] <- ifelse(!is.na(match(dataTrainChar[[col_name]], names(rank))),
rank[match(dataTrainChar[[col_name]], names(rank))],
dataTrainChar[[col_name]])
dataTrainChar[[col_name]] = as.numeric(dataTrainChar[[col_name]])
}
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
total <- colSums(is.na(dataTrain))
# Calculate the percentage of missing values for each column
percent <- (colSums(is.na(dataTrain)) / nrow(dataTrain)) * 100
# Create a data frame to store the total and percentage of missing values
missing_data <- data.frame(Total = total, Percent = percent)
# Sort the data frame by the percentage of missing values in descending order
missing_data <- missing_data[order(-missing_data$Percent), ]
# Display the first 20 rows of the sorted data frame
head(missing_data, 20)
# submission 5?
# rank is based on RMSE
# load libraries
library(caTools)
library(randomForest)
library(dplyr)
# loading data
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
SalePrice = dataTrain$SalePrice
# cleaning Train and test
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
character_columns = sapply(dataTrain, is.character)
dataTestChar = dataTest[, character_columns]
#below works for test
for (col_name in names(dataTrainChar)) {
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestChar[[col_name]] <- ifelse(!is.na(match(dataTestChar[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestChar[[col_name]])
dataTestChar[[col_name]] = as.numeric(dataTestChar[[col_name]])
}
# below works for train
for (col_name in names(dataTrainChar)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainChar[[col_name]] <- ifelse(!is.na(match(dataTrainChar[[col_name]], names(rank))),
rank[match(dataTrainChar[[col_name]], names(rank))],
dataTrainChar[[col_name]])
dataTrainChar[[col_name]] = as.numeric(dataTrainChar[[col_name]])
}
# creates dataframe with only numeric/int values for train
missing_columns = setdiff(names(dataTrain), names(dataTrainChar))
dataTrainNum <- dataTrain[, missing_columns]
# removes the sale price column
dataTrainNum$SalePrice = NULL
# combines everything into one dataframe for train data
dataTrainAll = cbind(dataTrainChar, dataTrainNum)
dataTrainAll$SalePrice = dataTrain$SalePrice
# corrects NAs for train data
dataTrainAll[] <- lapply(dataTrainAll, function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
#below might also work?
#dataTrainAll[] <- lapply(dataTrainAll, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# below for cleaning test data
# creates dataframe with only numeric/int values
missing_columns = setdiff(names(dataTest), names(dataTestChar))
dataTestNum <- dataTest[, missing_columns]
# combines everything into one dataframe
dataTestAll = cbind(dataTestChar, dataTestNum)
# changes NA to mean
dataTestAll <- dataTestAll %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
#summary(dataTestAll)
# correlation matrix
correlation = cor(dataTrainAll)
print(correlation)
write.csv(correlation, "correlationdata.CSV", row.names=FALSE)
# submission 5?
# rank is based on RMSE
# load libraries
library(caTools)
library(randomForest)
library(dplyr)
# loading data
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
dataTrain$MSZoning = NULL
dataTest$MSZoning = NULL
SalePrice = dataTrain$SalePrice
# cleaning Train and test
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
character_columns = sapply(dataTrain, is.character)
dataTestChar = dataTest[, character_columns]
#below works for test
for (col_name in names(dataTrainChar)) {
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestChar[[col_name]] <- ifelse(!is.na(match(dataTestChar[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestChar[[col_name]])
dataTestChar[[col_name]] = as.numeric(dataTestChar[[col_name]])
}
# below works for train
for (col_name in names(dataTrainChar)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainChar[[col_name]] <- ifelse(!is.na(match(dataTrainChar[[col_name]], names(rank))),
rank[match(dataTrainChar[[col_name]], names(rank))],
dataTrainChar[[col_name]])
dataTrainChar[[col_name]] = as.numeric(dataTrainChar[[col_name]])
}
# creates dataframe with only numeric/int values for train
missing_columns = setdiff(names(dataTrain), names(dataTrainChar))
dataTrainNum <- dataTrain[, missing_columns]
# removes the sale price column
dataTrainNum$SalePrice = NULL
# combines everything into one dataframe for train data
dataTrainAll = cbind(dataTrainChar, dataTrainNum)
dataTrainAll$SalePrice = dataTrain$SalePrice
# corrects NAs for train data
dataTrainAll[] <- lapply(dataTrainAll, function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
#below might also work?
#dataTrainAll[] <- lapply(dataTrainAll, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# below for cleaning test data
# creates dataframe with only numeric/int values
missing_columns = setdiff(names(dataTest), names(dataTestChar))
dataTestNum <- dataTest[, missing_columns]
# combines everything into one dataframe
dataTestAll = cbind(dataTestChar, dataTestNum)
# changes NA to mean
dataTestAll <- dataTestAll %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
#summary(dataTestAll)
mainFCTrain = dataTrainAll[, c("SalePrice", "Neighborhood", "ExterQual", "Foundation",
"BsmtQual", "KitchenQual", "GarageFinish", "OverallQual", "YearBuilt", "YearRemodAdd",
"MasVnrArea", "TotalBsmtSF", "X1stFlrSF", "GrLivArea", "FullBath", "TotRmsAbvGrd",
"Fireplaces", "GarageYrBlt", "GarageYrBlt", "GarageArea")]
mainFCTest = dataTestAll[, c("Neighborhood", "ExterQual", "Foundation",
"BsmtQual", "KitchenQual", "GarageFinish", "OverallQual", "YearBuilt", "YearRemodAdd",
"MasVnrArea", "TotalBsmtSF", "X1stFlrSF", "GrLivArea", "FullBath", "TotRmsAbvGrd",
"Fireplaces", "GarageYrBlt", "GarageYrBlt", "GarageArea")]
# testing the accuracy (need to use the train data to get the accuracy) ###
startModel = randomForest(SalePrice ~ ., data = dataTrainAll, ntree = 1000)
# Predict sale prices for the test dataset
predictions = predict(startModel, newdata = dataTestAll)
IDnum = 1461:2919
MySubmission = data.frame(Id = IDnum, SalePrice = predictions)
write.csv(MySubmission, "predictionsRandomForest.csv", row.names=FALSE)
