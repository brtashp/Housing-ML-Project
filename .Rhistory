print(posthoc_anova)
} else {
print("ANOVA not significant, no post hoc tests performed.")
}
# Categorical-Continuous Correlation (ANOVA)
anova_result <- aov(weight ~ feed, data = data)
print(summary(anova_result))
# Load required libraries
library(dplyr)     # For data manipulation
library(ggplot2)   # For data visualization
library(MASS)      # For Cramer's V calculation
source("C:/Users/brtas/Documents/R files/OA 1.1 (part 2).R", echo=TRUE)
labs(x = "Feed", y = "Weight", title = "Box Plot of Weight by Feed")
anova_result <- aov(chicken_weight ~ feed_type, data = data)
anova_result <- aov(weight ~ feed, data = data)
summary(anova_result)
summary(anova_result)
View(data)
source("C:/Users/brtas/Documents/R files/OA 1.1 (part 2).R", echo=TRUE)
git config --global user.email "brta.shp@gmail.com"
git config --global user.email "brta.shp@gmail.com"
git config --global user.email "brta.shp@gmail.com"
git config --global user.email brta.shp@gmail.com
git config --global user.email "brta.shp@gmail.com"
install.packages("usethis")
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
1
gitcreds::gitcreds_set()
gitcreds::gitcreds_set(Price Pioneers)
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
gitcreds::gitcreds_set()
# submission 5?
# rank is based on RMSE
# load libraries
library(caTools)
library(randomForest)
library(dplyr)
# loading data
dataTrain = read.csv("train.csv")
setwd("C:/Users/brtas/Documents/GitHub/Housing-ML-Project")
# submission 5?
# rank is based on RMSE
# load libraries
library(caTools)
library(randomForest)
library(dplyr)
# loading data
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
dataTrain$MSZoning = NULL
dataTest$MSZoning = NULL
SalePrice = dataTrain$SalePrice
# cleaning Train and test
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
character_columns = sapply(dataTrain, is.character)
dataTestChar = dataTest[, character_columns]
#below works for test
for (col_name in names(dataTrainChar)) {
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestChar[[col_name]] <- ifelse(!is.na(match(dataTestChar[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestChar[[col_name]])
dataTestChar[[col_name]] = as.numeric(dataTestChar[[col_name]])
}
# below works for train
for (col_name in names(dataTrainChar)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainChar[[col_name]] <- ifelse(!is.na(match(dataTrainChar[[col_name]], names(rank))),
rank[match(dataTrainChar[[col_name]], names(rank))],
dataTrainChar[[col_name]])
dataTrainChar[[col_name]] = as.numeric(dataTrainChar[[col_name]])
}
# creates dataframe with only numeric/int values for train
missing_columns = setdiff(names(dataTrain), names(dataTrainChar))
dataTrainNum <- dataTrain[, missing_columns]
# removes the sale price column
dataTrainNum$SalePrice = NULL
# combines everything into one dataframe for train data
dataTrainAll = cbind(dataTrainChar, dataTrainNum)
dataTrainAll$SalePrice = dataTrain$SalePrice
# corrects NAs for train data
dataTrainAll[] <- lapply(dataTrainAll, function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
#below might also work?
#dataTrainAll[] <- lapply(dataTrainAll, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# below for cleaning test data
# creates dataframe with only numeric/int values
missing_columns = setdiff(names(dataTest), names(dataTestChar))
dataTestNum <- dataTest[, missing_columns]
# combines everything into one dataframe
dataTestAll = cbind(dataTestChar, dataTestNum)
# changes NA to mean
dataTestAll <- dataTestAll %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
#summary(dataTestAll)
mainFCTrain = dataTrainAll[, c("SalePrice", "Neighborhood", "ExterQual", "Foundation",
"BsmtQual", "KitchenQual", "GarageFinish", "OverallQual", "YearBuilt", "YearRemodAdd",
"MasVnrArea", "TotalBsmtSF", "X1stFlrSF", "GrLivArea", "FullBath", "TotRmsAbvGrd",
"Fireplaces", "GarageYrBlt", "GarageYrBlt", "GarageArea")]
mainFCTest = dataTestAll[, c("Neighborhood", "ExterQual", "Foundation",
"BsmtQual", "KitchenQual", "GarageFinish", "OverallQual", "YearBuilt", "YearRemodAdd",
"MasVnrArea", "TotalBsmtSF", "X1stFlrSF", "GrLivArea", "FullBath", "TotRmsAbvGrd",
"Fireplaces", "GarageYrBlt", "GarageYrBlt", "GarageArea")]
# correlation matrix
#correlation = cor(dataTrainAll)
#print(correlation)
# split data into train and test (to test model)
#set.seed(88)
#split = sample.split(dataTrainAll$SalePrice, SplitRatio = 0.75)
#dataTrain = subset(dataTrainAll, split == TRUE)
#dataTrain = subset(dataTrainAll, split == FALSE)
# testing the accuracy (need to use the train data to get the accuracy) ###
startModel = randomForest(SalePrice ~ ., data = dataTrainAll, ntree = 1000)
# Predict sale prices for the test dataset
predictions = predict(startModel, newdata = dataTestAll)
my_data = dataTrainAll[, c(1,2,3,4,5)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
library(ggplot2)
source("~/GitHub/Housing-ML-Project/submission5.R", echo=TRUE)
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(1,2,3,4,5,6,7,8,9)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainChar[, c(1,2,3,4,5,6,7,8,9)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
View(dataTrainAll)
my_data = dataTrainAll[, c(1,2,3,4,5,6,7,8,9,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(10,11,12,13,14,15,16,17,18,19,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(20,21,22,23,24,25,26,27,28,29,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
View(dataTrainAll)
my_data = dataTrainAll[, c(30,31,32,33,34,35,36,37,38,39,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(40,41,42,43,44,45,46,47,48,49,75)]
my_data = dataTrainAll[, c(40,41,42,43,44,45,46,47,48,49,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(50,51,52,53,54,55,56,57,58,59,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(60,61,62,63,64,65,66,67,68,69,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(70,71,72,73,74,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
for (col_name in names(dataTrainNum)) {
mean_sale_price = tapply(SalePrice, dataTrainNum[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestNum[[col_name]] <- ifelse(!is.na(match(dataTestNum[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestNum[[col_name]])
dataTestNum[[col_name]] = as.numeric(dataTestNum[[col_name]])
}
for (col_name in names(dataTrainNum)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainNum[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainNum[[col_name]] <- ifelse(!is.na(match(dataTrainNum[[col_name]], names(rank))),
rank[match(dataTrainNum[[col_name]], names(rank))],
dataTrainNum[[col_name]])
dataTrainNum[[col_name]] = as.numeric(dataTrainNum[[col_name]])
}
# submission 5?
# rank is based on RMSE
# load libraries
library(caTools)
library(randomForest)
library(dplyr)
library(ggplot2)
#install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
# loading data
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
dataTrain$MSZoning = NULL
dataTest$MSZoning = NULL
SalePrice = dataTrain$SalePrice
# cleaning Train and test
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
character_columns = sapply(dataTrain, is.character)
dataTestChar = dataTest[, character_columns]
#below works for test
for (col_name in names(dataTrainChar)) {
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestChar[[col_name]] <- ifelse(!is.na(match(dataTestChar[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestChar[[col_name]])
dataTestChar[[col_name]] = as.numeric(dataTestChar[[col_name]])
}
# below works for train
for (col_name in names(dataTrainChar)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainChar[[col_name]] <- ifelse(!is.na(match(dataTrainChar[[col_name]], names(rank))),
rank[match(dataTrainChar[[col_name]], names(rank))],
dataTrainChar[[col_name]])
dataTrainChar[[col_name]] = as.numeric(dataTrainChar[[col_name]])
}
# creates dataframe with only numeric/int values for train
missing_columns = setdiff(names(dataTrain), names(dataTrainChar))
dataTrainNum <- dataTrain[, missing_columns]
# removes the sale price column
dataTrainNum$SalePrice = NULL
# below for cleaning test data
# creates dataframe with only numeric/int values
missing_columns = setdiff(names(dataTest), names(dataTestChar))
dataTestNum <- dataTest[, missing_columns]
# below works for test num values
for (col_name in names(dataTrainNum)) {
mean_sale_price = tapply(SalePrice, dataTrainNum[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestNum[[col_name]] <- ifelse(!is.na(match(dataTestNum[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestNum[[col_name]])
dataTestNum[[col_name]] = as.numeric(dataTestNum[[col_name]])
}
# below works for train num values
for (col_name in names(dataTrainNum)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainNum[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainNum[[col_name]] <- ifelse(!is.na(match(dataTrainNum[[col_name]], names(rank))),
rank[match(dataTrainNum[[col_name]], names(rank))],
dataTrainNum[[col_name]])
dataTrainNum[[col_name]] = as.numeric(dataTrainNum[[col_name]])
}
# combines everything into one dataframe for train data
dataTrainAll = cbind(dataTrainChar, dataTrainNum)
dataTrainAll$SalePrice = dataTrain$SalePrice
# corrects NAs for train data
dataTrainAll[] <- lapply(dataTrainAll, function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
# combines everything into one dataframe
dataTestAll = cbind(dataTestChar, dataTestNum)
# changes NA to mean
dataTestAll <- dataTestAll %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
my_data = dataTrainAll[, c(10,11,12,13,14,15,16,17,18,19,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(20,21,22,23,24,25,26,27,28,29,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(10,11,12,13,14,15,16,17,18,19,75)]
my_data = dataTrainAll[, c(10,11,12,13,14,15,16,17,18,19,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(1,2,3,4,5,6,7,8,9,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
# testing the accuracy (need to use the train data to get the accuracy) ###
startModel = randomForest(SalePrice ~ ., data = dataTrainAll, ntree = 1000)
# Predict sale prices for the test dataset
predictions = predict(startModel, newdata = dataTestAll)
IDnum = 1461:2919
MySubmission = data.frame(Id = IDnum, SalePrice = predictions)
write.csv(MySubmission, "predictionsRandomForest.csv", row.names=FALSE)
View(dataTrainNum)
# submission 5?
# rank is based on RMSE
# load libraries
library(caTools)
library(randomForest)
library(dplyr)
library(ggplot2)
#install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
# loading data
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
dataTrain$MSZoning = NULL
dataTest$MSZoning = NULL
SalePrice = dataTrain$SalePrice
# cleaning Train and test
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
character_columns = sapply(dataTrain, is.character)
dataTestChar = dataTest[, character_columns]
#below works for test
for (col_name in names(dataTrainChar)) {
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestChar[[col_name]] <- ifelse(!is.na(match(dataTestChar[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestChar[[col_name]])
dataTestChar[[col_name]] = as.numeric(dataTestChar[[col_name]])
}
# below works for train
for (col_name in names(dataTrainChar)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainChar[[col_name]] <- ifelse(!is.na(match(dataTrainChar[[col_name]], names(rank))),
rank[match(dataTrainChar[[col_name]], names(rank))],
dataTrainChar[[col_name]])
dataTrainChar[[col_name]] = as.numeric(dataTrainChar[[col_name]])
}
# creates dataframe with only numeric/int values for train
missing_columns = setdiff(names(dataTrain), names(dataTrainChar))
dataTrainNum <- dataTrain[, missing_columns]
# removes the sale price column
dataTrainNum$SalePrice = NULL
# below for cleaning test data
# creates dataframe with only numeric/int values
missing_columns = setdiff(names(dataTest), names(dataTestChar))
dataTestNum <- dataTest[, missing_columns]
# below works for test num values
for (col_name in names(dataTrainNum)) {
mean_sale_price = tapply(SalePrice, dataTrainNum[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestNum[[col_name]] <- ifelse(!is.na(match(dataTestNum[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestNum[[col_name]], names(mean_sale_price))],
dataTestNum[[col_name]])
dataTestNum[[col_name]] = as.numeric(dataTestNum[[col_name]])
}
# below works for train num values
for (col_name in names(dataTrainNum)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainNum[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainNum[[col_name]] <- ifelse(!is.na(match(dataTrainNum[[col_name]], names(rank))),
rank[match(dataTrainNum[[col_name]], names(rank))],
dataTrainNum[[col_name]])
dataTrainNum[[col_name]] = as.numeric(dataTrainNum[[col_name]])
}
# combines everything into one dataframe for train data
dataTrainAll = cbind(dataTrainChar, dataTrainNum)
dataTrainAll$SalePrice = dataTrain$SalePrice
# corrects NAs for train data
dataTrainAll[] <- lapply(dataTrainAll, function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
# combines everything into one dataframe
dataTestAll = cbind(dataTestChar, dataTestNum)
# changes NA to mean
dataTestAll <- dataTestAll %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
startModel = randomForest(SalePrice ~ ., data = dataTrainAll, ntree = 1000)
# Predict sale prices for the test dataset
predictions = predict(startModel, newdata = dataTestAll)
IDnum = 1461:2919
MySubmission = data.frame(Id = IDnum, SalePrice = predictions)
write.csv(MySubmission, "predictionsRandomForest.csv", row.names=FALSE)
# submission 5?
# rank is based on RMSE
# load libraries
library(caTools)
library(randomForest)
library(dplyr)
library(ggplot2)
#install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
# loading data
dataTrain = read.csv("train.csv")
dataTest = read.csv("test.csv")
# remove unnecessary columns
dataTrain$Id = NULL
dataTest$Id = NULL
dataTrain$PoolQC = NULL
dataTest$PoolQC = NULL
dataTrain$MiscFeature = NULL
dataTest$MiscFeature = NULL
dataTrain$Alley = NULL
dataTest$Alley = NULL
dataTrain$Fence = NULL
dataTest$Fence = NULL
dataTrain$MSZoning = NULL
dataTest$MSZoning = NULL
SalePrice = dataTrain$SalePrice
# cleaning Train and test
character_columns = sapply(dataTrain, is.character)
dataTrainChar = dataTrain[, character_columns]
character_columns = sapply(dataTrain, is.character)
dataTestChar = dataTest[, character_columns]
#below works for test
for (col_name in names(dataTrainChar)) {
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
# Use a different variable name for rank
rank_values = rank(mean_sale_price)
# Rename the values in dataTestChar based on rank
dataTestChar[[col_name]] <- ifelse(!is.na(match(dataTestChar[[col_name]], names(mean_sale_price))),
rank_values[match(dataTestChar[[col_name]], names(mean_sale_price))],
dataTestChar[[col_name]])
dataTestChar[[col_name]] = as.numeric(dataTestChar[[col_name]])
}
# below works for train
for (col_name in names(dataTrainChar)) {
# If the column is a factor, calculate the mean SalePrice for each unique value
mean_sale_price = tapply(SalePrice, dataTrainChar[[col_name]], mean)
#ordered = order(mean_sale_price)
rank = rank(mean_sale_price)
# Add the results to the result data frame
dataTrainChar[[col_name]] <- ifelse(!is.na(match(dataTrainChar[[col_name]], names(rank))),
rank[match(dataTrainChar[[col_name]], names(rank))],
dataTrainChar[[col_name]])
dataTrainChar[[col_name]] = as.numeric(dataTrainChar[[col_name]])
}
# creates dataframe with only numeric/int values for train
missing_columns = setdiff(names(dataTrain), names(dataTrainChar))
dataTrainNum <- dataTrain[, missing_columns]
# removes the sale price column
dataTrainNum$SalePrice = NULL
# below for cleaning test data
# creates dataframe with only numeric/int values
missing_columns = setdiff(names(dataTest), names(dataTestChar))
dataTestNum <- dataTest[, missing_columns]
# combines everything into one dataframe for train data
dataTrainAll = cbind(dataTrainChar, dataTrainNum)
dataTrainAll$SalePrice = dataTrain$SalePrice
# corrects NAs for train data
dataTrainAll[] <- lapply(dataTrainAll, function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
# combines everything into one dataframe
dataTestAll = cbind(dataTestChar, dataTestNum)
# changes NA to mean
dataTestAll <- dataTestAll %>%
mutate(across(everything(), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))
my_data = dataTrainAll[, c(1,2,3,4,5,6,7,8,9,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(10,11,12,13,14,15,16,17,18,19,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(20,21,22,23,24,25,26,27,28,29,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(30,31,32,33,34,35,36,37,38,39,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(40,41,42,43,44,45,46,47,48,49,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(50,51,52,53,54,55,56,57,58,59,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(60,61,62,63,64,65,66,67,68,69,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
my_data = dataTrainAll[, c(70,71,72,73,74,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
highcorTrain = dataTrainAll[, c(7,17,19,20,29,33,42,44,45,50,51,54,57,61,64,65,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
chart.Correlation(highcorTrain, histogram=TRUE, pch=19)
highcorTest = dataTestAll[, c(7,17,19,20,29,33,42,44,45,50,51,54,57,61,64,65)]
# testing the accuracy (need to use the train data to get the accuracy) ###
startModel = randomForest(SalePrice ~ ., data = highcorTrain, ntree = 500)
# Predict sale prices for the test dataset
predictions = predict(startModel, newdata = highcorTest)
IDnum = 1461:2919
MySubmission = data.frame(Id = IDnum, SalePrice = predictions)
write.csv(MySubmission, "predictionsRandomForest.csv", row.names=FALSE)
my_data = dataTrain[, c(1,2,3,4,5,6,7,8,9,75)]
chart.Correlation(my_data, histogram=TRUE, pch=19)
